#!/usr/bin/python3
import getpass
import gi
import subprocess
import os
import set
import count
import pi_search

gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk
from datetime import date, datetime

class Application(Gtk.Window):

    def __init__(self):
        self.logger("Hamonikr PC Checker Start")

        # init and show main window
        Gtk.Window.__init__(self, title="Hamonikr PC Checker")
        self.set_border_width(10)
        box_outer = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.add(box_outer)

        # set stacks
        stacks = Gtk.Stack()
        stacks.set_hexpand(0)
        stacks.set_vexpand(1)
        stacks.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
        stacks.set_transition_duration(1000)

        stack_switcher = Gtk.StackSwitcher()
        stack_switcher.set_stack(stacks)
        box_outer.pack_start(stack_switcher, 0, 0, 0)
        box_outer.pack_start(stacks, True, True, 0)

        # add stack 'security status'
        stc_security_status = Gtk.ListBox()
        stc_security_status.set_selection_mode(Gtk.SelectionMode.NONE)
        stacks.add_titled(stc_security_status, "label", "보안 상태")

        # add stack 'privacy'
        self.scrolledwindow = Gtk.ScrolledWindow()
        # stc_privacy = Gtk.ListBox()
        # stc_privacy.set_selection_mode(Gtk.SelectionMode.NONE)
        stacks.add_titled(self.scrolledwindow, "label", "개인 정보 보호")

        # add stack 'system info'
        stc_pc_info = Gtk.ListBox()
        stc_pc_info.set_selection_mode(Gtk.SelectionMode.NONE)
        stacks.add_titled(stc_pc_info, "label", "시스템 정보")

        # add stack 'check list'
        stc_security_checklist = Gtk.ListBox()
        stc_security_checklist.set_selection_mode(Gtk.SelectionMode.NONE)
        stacks.add_titled(stc_security_checklist, "label", "점검 항목")

        # add stack setting
        stc_setting = Gtk.ListBox()
        stc_setting.set_selection_mode(Gtk.SelectionMode.NONE)
        stacks.add_titled(stc_setting, "label", "설정")


        #privacy gui
        box_privacy = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=5)
        listbox_id = Gtk.ListBox()
        listbox_pn = Gtk.ListBox()
        listbox_ad = Gtk.ListBox()
        listbox_cd = Gtk.ListBox()
        self.id_check = Gtk.CheckButton()
        self.pn_check = Gtk.CheckButton()
        self.ad_check = Gtk.CheckButton()
        self.cd_check = Gtk.CheckButton()
        self.all_result = []
        self.all_checklist = []

        def set_search(category):
            num, result = pi_search.search_info(category)
            if category == 0:
                expand = Gtk.Expander(label="주민번호로 추정되는 데이터 "+str(num)+"건")
                listbox = listbox_id
                category_check = self.id_check
            elif category == 1:
                expand = Gtk.Expander(label="전화번호로 추정되는 데이터 "+str(num)+"건")
                listbox = listbox_pn
                category_check = self.pn_check
            elif category == 2:
                expand = Gtk.Expander(label="주소로 추정되는 데이터 "+str(num)+"건")
                listbox = listbox_ad
                category_check = self.ad_check
            elif category == 3:
                expand = Gtk.Expander(label="카드번호로 추정되는 데이터 "+str(num)+"건")
                listbox = listbox_cd
                category_check = self.cd_check

            expand.set_expanded(True)
            category_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
            checklist = []
            checklist.append(category_check)
            category_box.pack_start(category_check, False, False, 5)
            category_box.pack_start(expand, 0, 0, 0)
            box_privacy.pack_start(category_box, 0, 0, 0)
            for file in result:
                if file!="":
                    filepath = file.split(":")[0]
                    search_text = file.split(":")[1]
                    filename = filepath.split("/")[-1]
                    box = Gtk.Box()
                    check = Gtk.CheckButton()
                    checklist.append(check)
                    box.pack_start(check, False, False, 0)
                    filelink = "file://" + filepath
                    btn_file = Gtk.LinkButton(uri=filelink, label=filename)
                    box.pack_start(btn_file, False, False, 0)
                    search_text = Gtk.Label(label=search_text)
                    box.pack_start(search_text, False, False, 5)
                    listbox.add(box)
            expand.add(listbox)
            category_check.connect("toggled",self.on_check_toggled, category_check, checklist)
            self.all_result.append(result)
            self.all_checklist.append(checklist)
        
        # category : id
        set_search(0)
        # category : phone num
        set_search(1)
        # category : address
        set_search(2)
        # category : card num
        set_search(3)
        
        allcheck_btn = Gtk.CheckButton(label="전체선택")
        allcheck_btn.connect("clicked", self.fnt_allcheck, allcheck_btn)
        rm_btn = Gtk.Button(label="일괄 삭제")
        rm_btn.connect("clicked", self.fnt_pirm, self.all_result, self.all_checklist)

        privacy_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=15)
        privacy_box.pack_start(allcheck_btn, 0, 0, 0)
        privacy_box.pack_start(box_privacy, 0, 0, 0)
        privacy_box.pack_start(rm_btn, 0, 0, 0)

        self.scrolledwindow.add(privacy_box)


        # add reload button at 'security status' stack
        box_refresh = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        btn_ref = Gtk.Button()
        img_ref = Gtk.Image()
        img_ref.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_refresh.png")
        btn_ref.add(img_ref)
        btn_ref.set_tooltip_text("보안 상태를 다시 점검합니다.")
        btn_ref.connect("clicked", self.fnt_set_score)
        box_refresh.pack_end(btn_ref, False, False, 0)
        row = Gtk.ListBoxRow()
        row.add(box_refresh)
        stc_security_status.add(row)

        # set 'security status' window
        self.lbl_total_status = Gtk.Label()
        box_total_status = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_total_status.pack_start(self.lbl_total_status, True, False, 0)
        row = Gtk.ListBoxRow()
        row.add(box_total_status)
        stc_security_status.add(row)

        # set 'system info' window
        self.lbl_total_info = Gtk.Label()
        box_total_info = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_total_info.pack_start(self.lbl_total_info, True, False, 0)
        row = Gtk.ListBoxRow()
        row.add(box_total_info)
        stc_security_status.add(row)

        # set score at 'security status' window
        self.lbl_total_score = Gtk.Label()
        box_total_score = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_total_score.pack_start(self.lbl_total_score, True, False, 0)
        row = Gtk.ListBoxRow()
        row.add(box_total_score)
        stc_security_status.add(row)
        # set score
        self.fnt_set_score(widget=self)


        ### set 'system info' contents ###

        ## search os info and set gui ##
        # os info
        os_name = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        os_ver = self.fnt_command_return_word("lsb_release -r", 'Release:\t', '\n')
        os_info = os_name + " " + os_ver

        # os gui
        lbl_os_name = Gtk.Label()
        lbl_os = Gtk.Label()
        box_os = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_os.pack_start(lbl_os_name, False, False, 0)
        box_os.pack_start(lbl_os, True, False, 0)

        lbl_os_name.set_markup("<span font='13' ><b> 운영체제      </b></span>")
        lbl_os.set_markup("<span>" + os_info + "</span>")

        row = Gtk.ListBoxRow()
        row.add(box_os)
        stc_pc_info.add(row)

        ## search cinnamon info and set gui (only for Hamonikr users) ##
        # TODO : 다른 DE 사용자도 도움이 되는 정보제공으로 변경 필요.
        if os_name == "Hamonikr":
            # cinnamon info
            cinnamon_ver = self.fnt_command_return_word("cinnamon --version", 'Cinnamon ', '\n')

            # cinnamon gui
            lbl_cinnamon_name = Gtk.Label()
            lbl_cinnamon = Gtk.Label()
            box_cinnamon = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
            box_cinnamon.pack_start(lbl_cinnamon_name, False, False, 0)
            box_cinnamon.pack_start(lbl_cinnamon, True, False, 0)

            lbl_cinnamon_name.set_markup("<span font='13'><b> 시나몬 버전   </b></span>")
            lbl_cinnamon.set_markup("<span>"+cinnamon_ver+"</span>")

            row = Gtk.ListBoxRow()
            row.add(box_cinnamon)
            stc_pc_info.add(row)

        ## search kernel info and set gui ##
        # kernel info
        kernel_ver = self.fnt_command_return_word("uname -r", False, '\n')

        # kernel gui
        lbl_kernel_name = Gtk.Label()
        lbl_kernel = Gtk.Label()
        box_kernel = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_kernel.pack_start(lbl_kernel_name, False, False, 0)
        box_kernel.pack_start(lbl_kernel, True, False, 0)

        lbl_kernel_name.set_markup("<span font='13'><b> 리눅스 커널   </b></span>")
        lbl_kernel.set_markup("<span>" + kernel_ver + "</span>")

        row = Gtk.ListBoxRow()
        row.add(box_kernel)
        stc_pc_info.add(row)

        ## search CPU info and set gui
        # CPU info
        cpu_name = self.fnt_command_return_word("lscpu | grep 'Model name:'", 'Model name:', '\n')
        cpu_cnt = subprocess.check_output("nproc", shell=True).decode().strip()

        # CPU gui
        lbl_cpu_name = Gtk.Label()
        lbl_cpu = Gtk.Label()
        box_cpu = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_cpu.pack_start(lbl_cpu_name, False, False, 0)
        box_cpu.pack_start(lbl_cpu, True, False, 0)

        lbl_cpu_name.set_markup("<span font='13'><b> 프로세서      </b></span>")
        lbl_cpu.set_markup("<span>" + cpu_name + " X " + cpu_cnt + "</span>")

        row = Gtk.ListBoxRow()
        row.add(box_cpu)
        stc_pc_info.add(row)

        ## search memory info and set gui ##
        # memory info
        memory_name = subprocess.check_output("free -h | grep 'Mem:'", shell=True).decode()
        memory_name = memory_name.split('Mem:')[1].strip().split(' ')[0]

        # memory gui
        lbl_memory_name = Gtk.Label()
        lbl_memory = Gtk.Label()
        box_memory = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_memory.pack_start(lbl_memory_name, False, False, 0)
        box_memory.pack_start(lbl_memory, True, False, 0)

        lbl_memory_name.set_markup("<span font='13'><b> 메모리        </b></span>")
        lbl_memory.set_markup("<span>" + memory_name + "</span>")

        row = Gtk.ListBoxRow()
        row.add(box_memory)
        stc_pc_info.add(row)

        ## search disk info and set gui ##
        # disk info
        disk_val = self.fnt_command_return_word(
            "df -P | grep -v ^Filesystem | awk '{sum += $2} END { print sum/1024/1024 }'", False, '\n')
        disk_val = str(round(float(disk_val), 1))

        # disk gui
        lbl_disk_name = Gtk.Label()
        lbl_disk = Gtk.Label()
        box_disk = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_disk.pack_start(lbl_disk_name, False, False, 0)
        box_disk.pack_start(lbl_disk, True, False, 0)

        lbl_disk_name.set_markup("<span font='13'><b> 하드 드라이브 </b></span>")
        lbl_disk.set_markup("<span>" + disk_val + " GB</span>")

        row = Gtk.ListBoxRow()
        row.add(box_disk)
        stc_pc_info.add(row)

        # graphic info
        graphic_val = self.fnt_command_return_word("lspci | grep -i VGA", 'controller: ', '\n')

        # graphic gui
        lbl_graphic_name = Gtk.Label()
        lbl_graphic = Gtk.Label()
        box_graphic = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_graphic.pack_start(lbl_graphic_name, False, False, 0)
        box_graphic.pack_start(lbl_graphic, True, False, 0)

        lbl_graphic_name.set_markup("<span font='13'><b> 그래픽카드    </b></span>")
        lbl_graphic.set_markup("<span>" + graphic_val + "</span>")

        row = Gtk.ListBoxRow()
        row.add(box_graphic)
        stc_pc_info.add(row)

        ## search uuid info and set gui ##
        # uuid info
        uuid_val = self.fnt_command_return_word("sudo blkid | grep UUID", 'UUID="', '"')

        # uuid gui
        lbl_uuid_name = Gtk.Label()
        lbl_uuid = Gtk.Label()
        box_uuid = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_uuid.pack_start(lbl_uuid_name, False, False, 0)
        box_uuid.pack_start(lbl_uuid, True, False, 0)

        lbl_uuid_name.set_markup("<span font='13'><b> 단말 제품 번호</b></span>")
        lbl_uuid.set_markup("<span>"+uuid_val+"</span>")

        row = Gtk.ListBoxRow()
        row.add(box_uuid)
        stc_pc_info.add(row)


        ### set 'check list' contents ###

        ## search password info and set gui ##
        row = Gtk.ListBoxRow()
        lbl_pw_name = Gtk.Label()
        lbl_pw_score = Gtk.Label()
        self.lbl_pw_score = Gtk.Label()
        self.lbl_pw_status = Gtk.Label()
        self.lbl_pw_info = Gtk.Label()

        (pw_status, pw_past) = set.set_password()       # search password info

        lbl_pw_name.set_markup("<b>비밀번호  </b>")
        self.lbl_pw_score.set_markup(str(count.count_pw_score()) + "<b>점</b>")
        self.lbl_pw_status.set_markup(pw_status)
        self.lbl_pw_info.set_markup(pw_past)

        # add password setting button
        btn_pw = Gtk.Button()
        img_set1 = Gtk.Image()
        img_set1.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_icon.png")
        btn_pw.add(img_set1)
        btn_pw.connect("clicked", self.fnt_open_user)
        btn_pw.connect("released",self.fnt_close_user)

        # set gui
        box_pw = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        box_pw.pack_start(self.lbl_pw_status, False, False, 0)
        box_pw.pack_start(lbl_pw_name, False, False, 15)
        box_pw.pack_start(self.lbl_pw_score,False,False,0)
        box_pw.pack_start(self.lbl_pw_info, True, True, 0)
        box_pw.pack_start(btn_pw, False, False, 0)
        row.add(box_pw)
        stc_security_checklist.add(row)

        ## search update info and set gui ##
        row = Gtk.ListBoxRow()
        lbl_update_name = Gtk.Label()
        self.lbl_update_status = Gtk.Label()
        self.lbl_update_info = Gtk.Label()
        self.lbl_update_score = Gtk.Label()

        osname = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        (update_status, update_info) = set.set_update(osname)     # search update info

        lbl_update_name.set_markup("<b>업그레이드</b>")
        self.lbl_update_score.set_markup(str(count.count_update_score()) + "<b>점</b>")
        self.lbl_update_status.set_markup(update_status)
        self.lbl_update_info.set_markup(update_info)

        # add one-click update button
        self.fupdate_flag = 0
        self.btn_fupdate = Gtk.Button()
        self.img_up = Gtk.Image()
        self.img_up.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_upgrade.png")
        self.btn_fupdate.add(self.img_up)
        self.btn_fupdate.set_tooltip_text("현재 업그레이드 가능한 패키지를 자동으로 업그레이드합니다.")
        self.btn_fupdate.connect("clicked", self.fnt_fupdate)
        self.btn_fupdate.connect("pressed",self.fnt_fupdate_pressed)

        # add update setting button
        btn_update = Gtk.Button()
        img_set2 = Gtk.Image()
        img_set2.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_icon.png")
        btn_update.add(img_set2)
        btn_update.connect("clicked", self.fnt_open_updatemanager)

        # set gui
        box_update = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        box_update.pack_start(self.lbl_update_status, False, False, 0)
        box_update.pack_start(lbl_update_name, False, False, 15)
        box_update.pack_start(self.lbl_update_score, False, False, 0)
        box_update.pack_start(self.lbl_update_info, True, True, 0)
        box_update.pack_start(self.btn_fupdate, False, False, 0)
        box_update.pack_start(btn_update, False, False, 0)
        row.add(box_update)
        stc_security_checklist.add(row)

        ## search ufw info and set gui ##
        row = Gtk.ListBoxRow()
        lbl_ufw_name = Gtk.Label()
        self.lbl_ufw_info = Gtk.Label()
        self.lbl_ufw_status = Gtk.Label()
        self.switch_ufw = Gtk.Switch()
        self.lbl_ufw_score = Gtk.Label()

        lbl_ufw_name.set_markup("<b>방화벽    </b>")
        self.lbl_ufw_score.set_markup(str(count.count_ufw_score()) + "<b>점</b>")
        (self.lbl_ufw_status, self.lbl_ufw_info, self.switch_ufw, ufw_status, ufw_info) = set.set_ufw()     # search ufw info

        # add ufw toggle button
        self.switch_ufw.connect("notify::active", self.fnt_ufw_toggled)
        self.switch_ufw.set_tooltip_text("방화벽 상태를 즉시 변경합니다.")

        # add ufw setting button
        btn_ufw = Gtk.Button()
        img_set3 = Gtk.Image()
        img_set3.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_icon.png")
        btn_ufw.add(img_set3)
        btn_ufw.connect("clicked", self.fnt_open_ufw)
        btn_ufw.connect("released", self.fnt_close_ufw)

        # set gui
        box_ufw = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        box_ufw.pack_start(self.lbl_ufw_status, False, False, 0)
        box_ufw.pack_start(lbl_ufw_name, False, False, 15)
        box_ufw.pack_start(self.lbl_ufw_score, False, False, 0)
        box_ufw.pack_start(self.lbl_ufw_info, True, True, 0)
        box_ufw.pack_start(self.switch_ufw, False, False, 0)
        box_ufw.pack_start(btn_ufw, False, False, 0)
        row.add(box_ufw)
        stc_security_checklist.add(row)

        ## search backup info and set gui ##
        row = Gtk.ListBoxRow()
        lbl_ts_name = Gtk.Label()
        self.lbl_ts_status = Gtk.Label()
        self.lbl_ts_info = Gtk.Label()
        self.lbl_ts_score = Gtk.Label()

        lbl_ts_name.set_markup("<b>백업      </b>")
        self.lbl_ts_score.set_markup(str(count.count_backup_score()) + "<b>점</b>")
        (self.lbl_ts_status, self.lbl_ts_info, ts_status, ts_info) = set.set_backup()       # search backup info

        # add backup setting button
        btn_ts = Gtk.Button()
        img_set4 = Gtk.Image()
        img_set4.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_icon.png")
        btn_ts.add(img_set4)
        btn_ts.connect("clicked", self.fnt_open_timeshift)
        btn_ts.connect("released", self.fnt_close_timeshift)

        # set gui
        box_ts = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        box_ts.pack_start(self.lbl_ts_status, False, False, 0)
        box_ts.pack_start(lbl_ts_name, False, False, 15)
        box_ts.pack_start(self.lbl_ts_score, False, False, 0)
        box_ts.pack_start(self.lbl_ts_info, True, True, 0)
        box_ts.pack_start(btn_ts, False, False, 0)
        row.add(box_ts)
        stc_security_checklist.add(row)


        ### set 'setting' contents ###

        ## search alarm info and set gui ##
        self.lbl_alarm_info = Gtk.Label()
        lbl_alarm = Gtk.Label()
        lbl_alarm.set_markup("<span font='13'><b> 알람 기능 </b></span>")

        (self.lbl_alarm_info, switch_alarm, alarm_info) = set.set_alarm()       # search alarm info

        # add alarm toggle button
        switch_alarm.connect("notify::active", self.fnt_alarm_toggled)

        # set gui
        box_alarm = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_alarm.pack_start(lbl_alarm, False, False, 0)
        box_alarm.pack_start(self.lbl_alarm_info, True, False, 0)
        box_alarm.pack_start(switch_alarm, False, True, 0)
        row = Gtk.ListBoxRow()
        row.add(box_alarm)
        stc_setting.add(row)

    def fnt_allcheck(self,widget, allcheck_btn):
        if allcheck_btn.get_active():
            self.id_check.set_active(True)
            self.pn_check.set_active(True)
            self.ad_check.set_active(True)
            self.cd_check.set_active(True)
        else:
            self.id_check.set_active(False)
            self.pn_check.set_active(False)
            self.ad_check.set_active(False)
            self.cd_check.set_active(False)

    def on_check_toggled(self, widget, category_check, checklist):
        if category_check.get_active():
            for check in checklist:
                check.set_active(True)
        else:
            for check in checklist:
                check.set_active(False)

    def fnt_pirm(self, widget, result, checklist):
        for j in range(4):
            i = 0
            for check in checklist[j]:
                if check.get_active():
                    filepath = result[j][i-1].split(":")[0]
                    searched = result[j][i-1].split(":")[1]
                    print('path:',filepath, "   searched:",searched)
                    subprocess.run("sudo sed -i 's/"+searched+"//' "+filepath, shell=True)
                i += 1

    # set/reload score at 'security status' window
    def fnt_set_score(self, widget):
        (total_score_text, total_status_text, total_info_text) = count.set_score()      # count score
        self.lbl_total_info.set_markup(total_info_text)
        self.lbl_total_score.set_markup(total_score_text)
        self.lbl_total_status.set_markup(total_status_text)

    # change subprocess.call result to split words
    def fnt_command_return_word(self, command, split1, split2):
        if False == split1:
            result = subprocess.check_output(command, shell=True).decode().split(split2)[0]
        elif False == split2:
            result = subprocess.check_output(command, shell=True).decode().split(split1)[1]
        else:
            result = subprocess.check_output(command, shell=True).decode().split(split1)[1].split(split2)[0]
        return result.strip()

    # open cinnamon-settings/user-accounts window when password setting button clicked
    def fnt_open_user(self, widget):
        self.logger("Open user - pw")
        osname = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        # for Hamonikr users
        if osname == "Hamonikr":
            subprocess.call('su $PCCHECKER_USER -c "cinnamon-settings user"', shell=True)
        # for GooroomOS and TmaxOS users
        else :
            subprocess.call('XDG_CURRENT_DESKTOP=GNOME gnome-control-center user-accounts', shell=True)

    # reload password info when password setting window is closed
    def fnt_close_user(self,widget):
        self.logger("Close user - pw")
        (pw_status, pw_past) = set.set_password()       # search password info
        self.lbl_pw_status.set_markup(pw_status)
        self.lbl_pw_info.set_markup(pw_past)

    # open minupdate/gooroom-update-launcher/gnome-control-center window when update setting button clicked
    def fnt_open_updatemanager(self, widget):
        self.logger("Open update manager")
        osname = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        if osname == "Hamonikr":
            subprocess.call('mintupdate', shell=True)
        elif osname == "Gooroom":
            subprocess.call('gooroom-update-launcher', shell=True)
        elif osname == "Tmaxos":
            subprocess.call('XDG_CURRENT_DESKTOP=GNOME gnome-control-center info-overview', shell=True)
        self.fupdate_flag = 1
        self.lbl_update_info.set_markup("오른쪽 <b>새로고침</b> 버튼을 클릭해 정보를 다시 불러와 주세요.")
        self.img_up.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_upgrade_refresh.png")
        self.btn_fupdate.add(self.img_up)
        self.btn_fupdate.set_tooltip_text("업데이트 상태를 다시 점검합니다.")

    # update and upgrade system when one-click update button is clicked
    def fnt_fupdate(self, widget):
        osname = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        if self.fupdate_flag==0 :
            self.logger("System upgrade")
            if osname== "Hamonikr" :
                subprocess.call('sudo mintupdate-cli --yes upgrade', shell=True)
            else :
                subprocess.call('sudo apt-get --yes update && sudo apt-get --yes upgrade', shell=True)
        else:
            self.fupdate_flag = 0
            self.img_up.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_upgrade.png")
            self.btn_fupdate.add(self.img_up)
            self.btn_fupdate.set_tooltip_text("현재 업그레이드 가능한 패키지를 자동으로 업그레이드합니다.")
        (update_status, update_info) = set.set_update(osname)
        self.lbl_update_status.set_markup(update_status)
        self.lbl_update_info.set_markup(update_info)

    # notify that update is in progress when one-click update button is clicked
    def fnt_fupdate_pressed(self,widget):
        if self.fupdate_flag == 0:
            self.lbl_update_info.set_markup("업데이트 진행 중입니다. 잠시만 기다려주세요.")

    # open gufw window when ufw setting button is clicked
    def fnt_open_ufw(self, widget):
        self.logger("Open ufw")
        subprocess.call('sudo gufw', shell=True)

    # reload ufw info when ufw setting window is closed
    def fnt_close_ufw(self, widget):
        self.logger("Close ufw")
        (lbl_ufw_status,lbl_ufw_info, switch_ufw, ufw_status, ufw_info) = set.set_ufw()     # search ufw info
        # set ufw gui
        self.lbl_ufw_status.set_markup(ufw_status)
        self.lbl_ufw_info.set_markup(ufw_info)
        self.switch_ufw.set_active(switch_ufw.get_active())

    # turn on/off ufw by ufw toggle button
    def fnt_ufw_toggled(self, switch_ufw, state):
        self.logger("Switch ufw")
        # turn on ufw
        if switch_ufw.get_active():
            subprocess.call("sudo ufw enable", shell=True)
        # turn off ufw
        else:
            subprocess.call("sudo ufw disable", shell=True)
        (lbl_ufw_status, lbl_ufw_info, switch_ufw, ufw_status, ufw_info) = set.set_ufw()    # search ufw info
        # set ufw gui
        self.lbl_ufw_status.set_markup(ufw_status)
        self.lbl_ufw_info.set_markup(ufw_info)

    # turn on/off alarm by alarm toggle button
    def fnt_alarm_toggled(self, alarm_switch, state):
        self.logger("Switch alarm")
        # trn on alarm
        if alarm_switch.get_active():
            subprocess.call("systemctl daemon-reload", shell=True)
            subprocess.call("systemctl restart pcchecker_alarm.timer", shell=True)
        # turn off alarm
        else:
            subprocess.call("systemctl stop pcchecker_alarm.timer", shell=True)
        (lbl_alarm_info, switch_alarm, alarm_info) = set.set_alarm()        # search alarm info
        # set alarm gui
        self.lbl_alarm_info.set_markup(alarm_info)

    # open timeshift-gtk window when backup setting button is clicked
    def fnt_open_timeshift(self, widget):
        self.logger("Open timeshft")
        subprocess.call('sudo timeshift-gtk', shell=True)

    # reload backup info when backup setting window is closed
    def fnt_close_timeshift(self,widget):
        self.logger("Close timeshft")
        (lbl_ts_status, lbl_ts_info, ts_status, ts_info) = set.set_backup()     # search backup info
        # set backup gui
        self.lbl_ts_status.set_markup(ts_status)
        self.lbl_ts_info.set_markup(ts_info)

    # write log with date and time
    def logger(self, message):
        today = date.today().strftime('%Y%m%d')
        time = datetime.now().strftime('%H:%M:%S')
        dir_path = "/var/log/pcchecker"
        file_name = "logger-" + today + ".log"

        if not os.path.isdir(dir_path):
            os.makedirs(dir_path)

        f = open(dir_path + "/" + file_name, mode='at', encoding='utf-8')
        f.write("[" + time + "] " + message + "\n")
        f.close()

    # run the application
    def run(self):
        self.set_default_size(500,1000)
        self.connect("destroy", Gtk.main_quit)
        self.show_all()
        Gtk.main()

# ensure that user has manager access
if 'root' != getpass.getuser():
    subprocess.call(
        'zenity --error --no-wrap --height=150 --width=250 --title "실행권한 오류" --text="관리자 권한으로 실행해 주시기 바랍니다."',
        shell=True)
else:
    Application().run()
